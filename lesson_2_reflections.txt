What happens when you initialize a repository? Why do you need to do it?

during initialization a hidden files is created. perhaps within that file are other hidden files. let’s check.Yes, 10 whole subfiles are created in the .git directory. They are full of files and directories themselves.

Apparently the whole archive structure is built during initialization.

How is the staging area different from the working directory and the repository? What value do you think it offers?

I think the staging area is different in that it is not actually a set of files, just a list of filenames.

The value is that you can begin checking in parts of a large project
as you go along to keep track of what is being added to the commit. This is also logically useful for a team project where everyone takes a piece and adds it to the staging are as they complete their task. The manager can then send a commit and compile everything to see if it works. 

How can you use the staging area to make sure you have one commit per logical change?

idk

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

if i was working on two different logical changes at the same time but I didn’t want to implement them together I could have branches developing each new feature until they worked, and then merge them to gather to see if they conflicted with one another. Also regionalizing, or making variants to run on multiple platforms could use branching. Of course, having multiple developers on a team would also use branches to separate their work and then merge it together to see if it works as a whole. 

How do the diagrams help you visualize the branch structure?

well they give you a tool, but the whole branch structure may be better seen with a gui. I would prefer the GUI. but at lest at this point I understand some of the underlying issues with a GUI. Also I don’t know if a GUI can allow unnamed branches or detached heads. I also still haven’t been able to see the branching diagrams in my system like int he examples.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

well you gained and lost some code and your branch structure may get more complicated, or more simple, but the actual history is more complicated. I bet a GUI is much more useful here. I am already appreciating and anticipating what I expect from my GUI applications for GIT.

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?


the pro is that lots of changes will be highlighted and put side by side

however some branches may be so far diverging that they will be really messy - like a translation branch where all the strings are necessarily different. A nice situation is when two programmers are working in widely different sections of the code and will not be overlapping their code. Planning ahead to use gif could be done for things like translation by putting all the output text into t able or something or even including a translation table as  separate item so that these areas are easily editable. 