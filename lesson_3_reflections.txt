1. When would you want to use a remote repository rather than keeping all your work local?

I can think of a few reasons: a) I want to have a "safe" place in the cloud to store my work; b) I want to share with collaborators and use the GitHub repository as our central place to keep work; c) I want to find collaborators by posting my project on GitHub and promote it there; d) I am very mobile and am working on the project from various computers ata various times.

2. Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

I would worry that there might be changes going on at the GitHub repository that I am not making and that the pull operation might overwrite my current work, or might bury my current commit under other developers’ commits. I am not quite sure what would happen.

3. Describe the differences between forks, clones, and branches. When would you use one instead of another?

Branches exist within the project you are working on. Clones are copies of the whole project. Forks are like branches of clones; a fork is a branch of an entire project, a clone, but a clone that is able to become a separate direction for a project, not to ever merge back into the original from which it was forked.

4. What is the benefit of having a copy of the last known state of the remote stored locally?

I think that rather than being a benefit, it is a necessity. The last known state of the remote is the key to being able to compare the remote and the local repositories. It is the common point of reference, without which they could not be compared by the computers.

5. How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

One way to collaborate without github would be to work in the same physical location as the collaborators. There you could walk from person to person to review code changes.

Another strategy would be to just use git attached to a common server location. Each collaborator would work on a separate branch of that common repository. 

There are, I understand other Git GUIs that can be used to visualize workflow in git. 

There are alternate tools like Mercurial.

Or the collaborators could all work on a single file sequentially and build it very carefully. During such a process changes could be added and then commented out to test them. All the experimental changes would be kept in the comments sections of a single file.

Working on sections of code in sandboxes to test them before trying to add them to a coding project may be another strategy to test without altering you “master” product.

Manually keeping differently named files in a folder system on the computer could also be done. 

There are probably a lot of project management and software architecture decisions that could facilitate a team working on a piece of software. Good planning up front might prevent many conflicts which git is being used to resolve. 